<?xml version="1.0"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<?rfc tocappendix="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="3"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<?rfc comments="no" ?>
<?rfc inline="yes" ?>
<rfc category="exp" docName="draft-muks-dnsop-opportunistic-refresh-00" ipr="trust200902">

  <front>

    <title>Opportunistic refresh for DNS resolvers</title>

    <author fullname="Shane Kerr" initials="S." surname="Kerr">
      <organization>Beijing Internet Institute</organization>
      <address>
        <postal>
          <street>2/F, Building 5, No.58 Jinghai Road, BDA</street>
          <city>Beijing</city>
          <code>100176</code>
          <country>CN</country>
        </postal>
        <email>shane@biigroup.cn</email>
        <uri>http://www.biigroup.com/</uri>
      </address>
    </author>

    <author fullname="Stephen Morris" initials="S." surname="Morris">
      <organization>Internet Systems Consortium</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>94063</code>
          <region>CA</region>
          <country>US</country>
        </postal>
        <email>stephen@isc.org</email>
        <uri>http://www.isc.org/</uri>
      </address>
    </author>

    <author fullname="Mukund Sivaraman" initials="M." surname="Sivaraman">
      <organization>Internet Systems Consortium</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>94063</code>
          <region>CA</region>
          <country>US</country>
        </postal>
        <email>muks@mukund.org</email>
        <uri>http://www.isc.org/</uri>
      </address>
    </author>

    <date/>

    <!-- Meta-data Declarations -->

    <area>Operations and Management Area</area>
    <workgroup>Internet Engineering Task Force</workgroup>

    <!-- <keyword>dns</keyword> -->

    <abstract>
      <t>This document describes a mechanism using which a DNS resolver
      can receive information about the freshness of a zone's cached
      records from an authoritative server, and can opportunistically
      refresh TTLs of all of the zone's cached records without making
      additional queries per each record over the network to refresh
      expired records. Using this mechanism can also reduce the workload
      of authoritative servers in constructing replies for refresh
      queries, and the risk of losing such replies across the
      network.</t>
    </abstract>

  </front>

  <middle>

    <section title="Introduction">
      <t>DNS secondary nameservers use the value in a zone's SOA RR's
      SERIAL field to determine freshness of the copy of the zone that
      they are maintaining locally, and establish if a zone transfer to
      update the zone is necessary. Typically they perform this through
      SOA refresh timeout or the NOTIFY mechanism, when they compare the
      SOA SERIAL value from the local copy of a zone against the SOA
      SERIAL value from a remote primary nameserver, and perform a zone
      transfer if the serial number comparison <xref target="RFC1982" />
      establishes that a zone transfer is necessary. By using the SERIAL
      field, nameservers avoid redundant and unnecessary zone transfers
      for local data that is already fresh, thereby reducing network
      traffic and nameserver resource usage.</t>

      <t>Similarly, HTTP is a request/response protocol that allows
      caching data with a TTL duration. HTTP provides the concept of
      "cache validators" (see Section 13.3 of <xref target="RFC2616" />)
      using which a HTTP client can validate the freshness of an expired
      resource in cache and extend its lifetime without requiring a
      retransfer of the resource.</t>

      <t>This memo introduces such a scheme to DNS QUERY which can
      benefit DNS when caching resolvers are involved. There are several
      advantages in having this scheme in DNS, and these are explored in
      <xref target="sec-advantages" />.</t>

      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL"
      in this document are to be interpreted as described in <xref
      target="RFC2119" />.</t>
    </section>

    <section title="Client and server behavior" anchor="sec-behavior">

      <t>The SOA SERIAL field's value is largely only used for zone
      transfers. Some custom authoritiative servers that don't implement
      zone transfers do not care to maintain a useful value in the
      field.</t>

      <t>Use of this scheme can be switched off completely either by the
      authoritiative nameserver or by the caching resolver, on a
      per-zone basis.</t>

      <section title="Advantages" anchor="sec-advantages">

        <t>It may seem non-intuitive, but on a caching resolver, this
        scheme would benefit typical smaller zones more than typical
        larger zones. Typically, smaller zones are updated less
        frequently, and so, a cached record from a small zone is more
        likely to be fresh.</t>

        <t>TBD: Add use-cases of common multi-lookup sequences described
        to Evan (A and DNSKEY; SRV and A; small office setups that
        typically have www, mail, jabber, sip, git, wiki, etc. that get
        lookups continuously)</t>

        <t>TBD.</t>
      </section>

      <section title="Examples" anchor="sec-examples">
        <t>An example of the scheme follows:</t>

        <texttable>

          <ttcol align="right">TIME</ttcol>
          <ttcol align="left">Resolver behavior</ttcol>

          <c>-15.0</c>
          <c>receives query for mail.example.org./A</c>

          <c>-10.0</c>
          <c>queries nameserver for mail.example.org./A with empty
          ZONE option</c>

          <c>0.0</c>
          <c>caches auth answer mail.example.org./A with TTL=3600,
          ZONE=&lt;SERIAL=42,ZONENAME=example.org.&gt;</c>

          <c>0.1</c>
          <c>notes that ZONE=&lt;SERIAL=42,ZONENAME=example.org.&gt; at
          TIME=0</c>

          <c>0.2</c>
          <c>replies from cache for mail.example.org./A</c>

          <c>2595.0</c>
          <c>receives query for git.example.org./A</c>

          <c>2600.0</c>
          <c>queries nameserver for git.example.org./A with empty
          ZONE option</c>

          <c>2700.0</c>
          <c>caches auth answer git.example.org./A with TTL=3600,
          ZONE=&lt;SERIAL=42,ZONENAME=example.org.&gt;</c>

          <c>2700.1</c>
          <c>notes that ZONE=&lt;SERIAL=42,ZONENAME=example.org.&gt; at
          TIME=2700</c>

          <c>2700.2</c>
          <c>replies from cache for git.example.org./A</c>

          <c>3601.0</c>
          <c>receives query for mail.example.org./A</c>

          <c>3601.1</c>
          <c>has note that SERIAL was unchanged at TIME=2700, so
          its cached mail.example.org./A answer is valid till time
          2700+3600</c>

          <c>3601.2</c>
          <c>bumps mail.example.org./A TTL to expire at TIME=6300</c>

          <c>3601.3</c>
          <c>replies from cache for mail.example.org./A</c>

        </texttable>

        <t>The same can similarly be adopted for lazy TTL update during
        prefetch <xref target="I-D.wkumari-dnsop-hammer" />:</t>

        <texttable>

          <ttcol align="right">TIME</ttcol>
          <ttcol align="left">Resolver behavior</ttcol>

          <c>-15.0</c>
          <c>receives query for mail.example.org./A</c>

          <c>-10.0</c>
          <c>queries nameserver for mail.example.org./A with empty
          ZONE option</c>

          <c>0.0</c>
          <c>caches auth answer mail.example.org./A with TTL=3600,
          ZONE=&lt;SERIAL=42,ZONENAME=example.org.&gt;</c>

          <c>0.1</c>
          <c>notes that ZONE=&lt;SERIAL=42,ZONENAME=example.org.&gt; at
          TIME=0</c>

          <c>0.2</c>
          <c>replies from cache for mail.example.org./A</c>

          <c>2595.0</c>
          <c>receives query for git.example.org./A</c>

          <c>2600.0</c>
          <c>queries nameserver for git.example.org./A with empty
          ZONE option</c>

          <c>2700.0</c>
          <c>caches auth answer git.example.org./A with TTL=3600,
          ZONE=&lt;SERIAL=42,ZONENAME=example.org.&gt;</c>

          <c>2700.1</c>
          <c>notes that ZONE=&lt;SERIAL=42,ZONENAME=example.org.&gt; at
          TIME=2700</c>

          <c>2700.2</c>
          <c>replies from cache for git.example.org./A</c>

          <c>3595.0</c>
          <c>receives query for mail.example.org./A</c>

          <c>3595.0</c>
          <c>replies from cache for mail.example.org./A</c>

          <c>3595.0</c>
          <c>determines that prefetch is required for
          mail.example.org./A</c>

          <c>3595.0</c>
          <c>has note that SERIAL was unchanged at TIME=2700, so
          its cached mail.example.org./A answer is valid till time
          2700+3600</c>

          <c>3595.0</c>
          <c>resolver bumps mail.example.org./A TTL to expire at
          TIME=6300</c>

        </texttable>

        <t>Note that other records from the same zone can be similarly
        refreshed without network fetches.</t>

      </section>
    </section>

    <section title="The ZONE EDNS(0) option" anchor="sec-format">

      <t>ZONE is an EDNS(0) <xref target="RFC6891" /> option that is
      used to transmit information about a zone. Client and server
      behavior are described in <xref target="sec-behavior" />. In this
      section, the option's syntax is provided.</t>

      <section title="Wire format">

        <t>The following describes the wire format of the OPTION-DATA
        field <xref target="RFC6891" /> of the ZONE EDNS option. All
        ZONE option fields must be represented in network byte
        order.</t>

        <texttable>

          <ttcol>Option field</ttcol>
          <ttcol>Type</ttcol>
          <ttcol>Field size</ttcol>

          <c>SERIAL</c>
          <c>32-bit unsigned integer</c>
          <c>4 octets</c>

          <c>ZONENAME</c>
          <c>DNS name <xref target="RFC1035" /></c>
          <c>Variable length</c>

        </texttable>

        <t>The SERIAL and ZONENAME fields may together be absent from
        query messages when these values are unknown to the client (from
        previous queries) for the question it is querying for. In this
        case, the OPTION-DATA field is empty and OPTION-LENGTH field for
        the EDNS option is set to 0.</t>

        <t>In all other cases, both fields MUST be present in the
        option.</t>

      </section>

      <section title="Option fields">
        <section title="SERIAL">
          <t>The SERIAL field is represented as a 32-bit unsigned
          integer in network byte order. TBD.</t>
        </section>
        <section title="ZONENAME">
          <t>The ZONENAME field contains the name of the zone which
          contains the authoritative answer for the question. This is
          represented as a DNS name in wire format <xref
          target="RFC1035" />. Name compression MUST NOT be used <xref
          target="RFC3597" />. TBD.</t>
        </section>
      </section>
      <section title="Presentation format">
        <t>As with other EDNS(0) options, the ZONE EDNS option does not
        have a presentation format.</t>
      </section>
    </section>

    <section title="Security considerations" anchor="sec-security">
      <t>A DNS resolver MUST verify that the ZONENAME field in replies
      corresponds to the current zone cut that the resolver has
      determined when contacting the nameserver during the resolution
      process. This field is provided by the nameserver as a hint to the
      client for use in cases where the zone cuts cannot be determined
      without additional queries to the nameserver, such as when parent
      and child zones of a delegation are served by the same
      nameserver. The DNS resolver MUST check that this field contains
      either the expected zone cut, or is a child of the expected zone
      cut but is equal to or a super-domain of the name in the
      question.</t>
    </section>

    <section title="IANA considerations">
      <t>This document defines a new EDNS(0) option, titled ZONE (see
      <xref target="sec-format" />), assigned a value of &lt;TBD&gt;
      from the DNS EDNS0 Option Codes (OPT) space [to be removed upon
      publication:
      https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-11].</t>

      <texttable>

        <ttcol>Value</ttcol>
        <ttcol>Name</ttcol>
        <ttcol>Status</ttcol>
        <ttcol>Reference</ttcol>

        <c>TBD</c>
        <c>ZONE</c>
        <c>TBD</c>
        <c>[draft-muks-dnsop-opportunistic-refresh]</c>

      </texttable>
    </section>

    <section title="Acknowledgements">
      <t>The idea was first discussed by Shane and Mukund during IETF-94
      where various advantages of using such a scheme were
      discovered. During the same IETF meeting, the scheme was verbally
      described to and discussed with Ray Bellis, Geoff Huston and
      George Michaelson from which the scheme was refined. After the
      IETF meeting, initial drafts of the idea were reviewed by Cathy
      Almond, Mark Andrews, Ray Bellis, Evan Hunt and Witold
      Krecicki. Stephen joined as an author after suggesting changes to
      improve presentation of the ideas and alternate schemes.</t>

      <t>Ray Bellis pointed to a dnsop mailing list thread where a
      similar idea was considered by Bob Harold in reply to discussion
      about <xref target="I-D.yao-dnsop-root-cache" /> on 28 October
      2015.</t>
    </section>

  </middle>

  <back>

    <references title="Normative references">
      <?rfc include="reference.RFC.1035.xml"?>
      <?rfc include="reference.RFC.1982.xml"?>
      <?rfc include="reference.RFC.2119.xml"?>
      <?rfc include="reference.RFC.3597.xml"?>
      <?rfc include="reference.RFC.6891.xml"?>
      <?rfc include="reference.I-D.wkumari-dnsop-hammer.xml"?>
    </references>

    <references title="Informative references">
      <?rfc include="reference.RFC.2308.xml"?>
      <?rfc include="reference.RFC.2616.xml"?>
      <?rfc include="reference.I-D.yao-dnsop-root-cache.xml"?>
      <?rfc include="reference.I-D.ietf-dnsop-edns-client-subnet.xml"?>
    </references>

    <section title="Open issues (to be removed before publication)">
      <t>
        <list style="symbols">

          <t>Stephen: An alternate scheme is proposed, that includes the
          SOA RR in the additional section of every reply and doesn't
          use the EDNS option. If a nameserver doesn't maintain the SOA
          serial, it doesn't include the SOA RR. A client doesn't
          process SOA RRs for this scheme from negative answers <xref
          target="RFC2308" />. Some advantages of using the EDNS option
          are not available with this scheme.</t>

          <t>Ray: one thing you may have to consider is NS record
          handling - there's an issue where a resolver always talks to a
          child without ever referring back to the parent NS perpetually
          prolonging the TTL of NS records learned from the child can
          permit phantom zones (where the zone may have been turned off,
          or had parent NS changes, but the resolver doesn't notice).</t>

          <t>The behavior of when DNSSEC re-validation may be avoided
          should be described precisely.</t>

          <t><xref target="I-D.ietf-dnsop-edns-client-subnet" /> can
          supply different answers depending on the client subnet. The
          interaction with this scheme should be explored and any
          necessary changes should be made to accomodate it.</t>

        </list>
      </t>
    </section>

    <section title="Change history (to be removed before publication)">
      <t>
        <list style="symbols">

          <t>
          draft-muks-dnsop-opportunistic-refresh-00
          <vspace/>
          Initial draft.
          </t>

        </list>
      </t>
    </section>

  </back>
</rfc>
